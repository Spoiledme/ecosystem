version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'pg_isready -q -U paymaster-proxy@oplabs-local-web.iam -d paymaster-proxy',
        ]
    volumes:
      - ./setup-local-db.sql:/docker-entrypoint-initdb.d/setup-local-db.sql
    ports:
      - '5432:5432'

  redis:
    image: 'redis:latest'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 2s
    ports:
      - 6379:6379

  paymaster-proxy-app: &paymaster-proxy-app
    build:
      context: ../../
      dockerfile: Dockerfile
      target: paymaster-proxy
    env_file: .env
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY_SERVICE_CLIENT=http://0.0.0.0:7330
    healthcheck:
      test: wget localhost:7310/healthz -q -O - > /dev/null 2>&1
    volumes:
      - ../../certs/extra-ca-certificates.crt:/usr/local/share/ca-certificates/extra-ca-certificates.crt
    ports:
      - 7310:7310
    depends_on:
      redis:
        condition: service_healthy

  paymaster-proxy-app-replica:
    <<: *paymaster-proxy-app
    labels:
      - 'traefik.http.routers.paymaster-proxy.rule=Host(`0.0.0.0`)'
    deploy:
      replicas: 3 # Simulate 3 pods
    ports: [] # unset ports

  reverse-proxy:
    image: traefik:v2.5
    command: --api.insecure=true --providers.docker
    ports:
      - '7310:80' # more consistent between the single app and the replicas
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock
